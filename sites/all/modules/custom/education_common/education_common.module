<?php

define('TEACHER_ROLE', 4);
define('STUDENT_ROLE', 5);


include_once 'inc/education_common.properties.inc';
include_once 'inc/education_common.emails.inc';
include_once 'inc/education_common.forms.inc';
include_once 'inc/education_common.variable.inc';


/**
 * Implements hook_node_presave().
 */
function education_common_node_presave($node){

  if ($node->type == 'lesson' && $node->is_new ) {
    // todo create com prod b add rel
    $product = commerce_product_new('product');
    $product->sku = "LESSON_" . time();
    $product->title = "CP_" . $node->title;
    $product->language = LANGUAGE_NONE;
    $product->uid = $node->uid;
    $product->commerce_price[LANGUAGE_NONE][0] = array(
      'amount' => $node->field_price[LANGUAGE_NONE][0]['value'] * 100, // $10
      'currency_code' => "USD",
    );
    commerce_product_save($product);
    $node->field_product_reference[LANGUAGE_NONE][0]['product_id'] = $product->product_id;

  }
}

/**
 * Implements form_FORM_ID_alter().
 */
function education_common_form_lesson_node_form_alter(&$form, &$form_state, $form_id) {
  // Alter the 'article' form here.
  if (user_has_role(TEACHER_ROLE)) {
    $form['field_product_reference']['#access'] = FALSE;
  }
}

/**
 * Implements form_FORM_ID_alter().
 */
function education_common_form_classroom_node_form_alter(&$form, &$form_state, $form_id) {
  // Alter the 'classroom' form here.

  $form['field_current_editor_uid']['#access'] = FALSE;
  $form['field_timer_editor_uid']['#access'] = FALSE;
  $form['field_lesson_paused']['#access'] = FALSE;

  $form['field_order_id']['#access'] = FALSE;
  $form['field_lesson_started'][LANGUAGE_NONE][0]['value']['#access'] = FALSE;
  $form['field_lesson_started'][LANGUAGE_NONE]['#access'] = FALSE;

  $form['field_time_started'][LANGUAGE_NONE][0]['value']['#access'] = FALSE;

  if (user_has_role(STUDENT_ROLE) || user_has_role(TEACHER_ROLE)) {
    global $user;
    $form['title']['#access'] = FALSE;

    $form['field_desk'][LANGUAGE_NONE][0]['#title'] = '';
    $form['field_desk'][LANGUAGE_NONE][0]['data']['#title'] = '';

    if (user_has_role(STUDENT_ROLE)) {
      $form['field_join_lesson_link']['#access'] = FALSE;
    }

    $form['timer'] = array(
      '#markup' =>  '<div id="classroom-timer"></div>'
    );

    $form['classroom_nid'] = array(
      '#type' =>  'hidden',
      '#default_value' =>  arg(1),
    );

    $form['timer_editor_uid'] = array(
      '#type' =>  'hidden',
      '#default_value' =>  $user->uid,
    );
    $form['timer_pause'] = array(
      '#markup' =>  '<a id="pauseResume" class="pause" href="#">Pause</a>'
    );

    //$a = 1;

    $form['actions']['preview']['#access'] = FALSE;
    $form['actions']['delete']['#access'] = FALSE;
    if (user_has_role(STUDENT_ROLE)) {
      $form['actions']['submit']['#access'] = FALSE;
    }




    if (user_has_role(TEACHER_ROLE)) {

      $form['#attached']['js'][] = array(
        'data' => drupal_get_path('theme', 'education') . '/js/classroom-ajax.js',
        'type' => 'file',
      );

      $form['actions']['submit']['#attributes'] = array(
        'class' => array(
          'btn btn_red form__submit save_lesson_classroom',
        ),
      );

      $form['actions']['submit']['#prefix'] = '<div class="form__block submit_lesson_wrapper">';
      $form['actions']['submit']['#suffix'] = '</div>';
      /*
      $form['actions']['submit']['#ajax'] = array(
        'callback' => 'education_common_submit_lesson_ajax_callback',
      );
      */
      $classroom = node_load(arg(1));
      if ($classroom->field_lesson_started[LANGUAGE_NONE][0]['value']) {
        $form['actions']['finish'] = array(
          '#type' => 'submit',
          '#value' => t('Finish lesson'),
          '#attributes' => array(
            'class' => array(
              'btn btn_red form__submit finish_lesson',
            ),
          ),
          '#prefix' => '<div class="form__block finish_lesson_wrapper">',
          '#suffix' => '</div>',
          '#ajax' => array(
            'callback' => 'education_common_finish_lesson_ajax_callback',
          ),
        );
      } else {

        $form['actions']['start'] = array(
          '#type' => 'submit',
          '#value' => t('Start lesson'),
          '#attributes' => array(
            'class' => array(
              'btn btn_red form__submit finish_lesson',
            ),
          ),
          '#prefix' => '<div class="form__block start_lesson_wrapper">',
          '#suffix' => '</div>',
          '#ajax' => array(
            'callback' => 'education_common_start_lesson_ajax_callback',
          ),
        );
      }

    }
  }
}

/*
function education_common_submit_lesson_ajax_callback(&$form, &$form_state) {
  // TODO set

  $classroom_nid = $form['nid']['#value'];
  $classroom = node_load($classroom_nid);
  $classroom->field_lesson_started[LANGUAGE_NONE][0]['value'] = 1;

  $time = time();
  $classroom->field_time_started[LANGUAGE_NONE][0]['value'] = $time;
  node_save($classroom);


  //$commands[] = array('command' => 'reloadPage');
  /*
  $commands[] = array();
  return array('#type' => 'ajax', '#commands' => $commands);


  //return $form;
}
  */

function education_common_start_lesson_ajax_callback(&$form, &$form_state) {
  // TODO set
  $classroom_nid = $form['nid']['#value'];
  $classroom = node_load($classroom_nid);
  $classroom->field_lesson_started[LANGUAGE_NONE][0]['value'] = 1;

  $time = time();
  $classroom->field_time_started[LANGUAGE_NONE][0]['value'] = $time;
  node_save($classroom);

  $commands[] = array('command' => 'reloadPage');
  return array('#type' => 'ajax', '#commands' => $commands);
}

function education_common_finish_lesson_ajax_callback(&$form, &$form_state) {

  $classroom_nid = $form['nid']['#value'];
  $classroom = node_load($classroom_nid);

  $classroom->field_time_started[LANGUAGE_NONE][0]['value'] = 0;
  node_save($classroom);

  $order_id = $classroom->field_order_id[LANGUAGE_NONE][0]['value'];
  $order =commerce_order_load($order_id);
  $order->status = 'completed';
  commerce_order_save($order);
  //$lesson

  $message = "<p>";
  $message .= '<div class="form__block"><div class="form__desc lesson_completed">
  You have completed this lesson.<br />
      <br /></div></div>';

  $message .= "</p>";
  $commands[] = ajax_command_replace('#' . $form['#id'], $message);
  //$commands[] = ajax_command_invoke('.popup__close', 'addClass', array('close_reload'));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_menu().
 */
function education_common_menu() {
  $items = array();

  $items['how-does-it-works'] = array(
    'title' => 'How does it works',
    'page callback' => 'education_common_works',
    'access callback' => TRUE,
    //'page arguments' => array(1),
  );

  $items['recharge-balance'] = array(
    'title' => 'Recharge balance',
    'page callback' => 'education_recharge_balance',
    'access callback' => TRUE,
    //'page arguments' => array(1),
  );

  $items['classroom/%'] = array(
    'title' => 'Classroom',
    'page callback' => 'education_common_class_room',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
  );

  return $items;
}

function education_common_works() {

  return '';
}

function education_common_class_room($arg) {
  if (user_is_anonymous()) {
    drupal_access_denied();
    drupal_exit();
  }
  else  {
    $node = node_load($arg);
    $form_state['build_info']['args'] = array($node);
    if ($node) {

      $order_id = isset($node->field_order_id[LANGUAGE_NONE]) ? $node->field_order_id[LANGUAGE_NONE][0]['value'] : 0;
      $order = commerce_order_load($order_id);
      if ($order->status == 'completed') {
        return '<div class="form__desc lesson_completed">This lesson is completed</div>';
      }

      form_load_include($form_state, 'inc', 'node', 'node.pages');
      $form = drupal_build_form('classroom_node_form', $form_state);

      $time_stared = 0;
      $now = 0;
      $time_stared = isset($node->field_time_started[LANGUAGE_NONE]) ?
        //$node->field_time_started[LANGUAGE_NONE][0]['value'] + time() : time();
        $node->field_time_started[LANGUAGE_NONE][0]['value'] : 0;
      if ($time_stared) {
        //$now = 40 * 60 - (time() - $time_stared);
        $now = $time_stared;
      }
      else {
        $now = 40 * 60;
      }

      drupal_add_js(array('time_stared' => $now), 'setting');
      return drupal_render($form);
    }
    return '';
  }
}

function education_recharge_balance() {
  global $user;
  $account = user_load($user->uid);
  $summ = isset($account->field_balance[LANGUAGE_NONE]) ? $account->field_balance[LANGUAGE_NONE][0]['value'] : 0;
  $balance_summ = $summ;
  return array(
    '#markup' => '<div class="balance"><div class="user-balance">Your balance is: ' . $balance_summ . '$</div>
<div class="recharge"><a href="#" class="btn product__balance_recharge popup__link" data-popup="balance_recharge">Recharge balance</a>
</div>',
  );
}

/**
 * Implements hook_views_pre_render
 */
function education_common_views_pre_render(&$view) {
  $used_ids = array();
  if ($view->name == 'commerce_user_orders'){
    foreach ($view->result as $row){
      if (!in_array($row->order_id, $used_ids)) {
        $new_view_result[] = $row;
        $used_ids[] = $row->order_id;
      }
    }
    $view->result = $new_view_result;
  }
}

/**
 * Implements hook_user_init
 */
function education_common_init() {
  if (request_uri() == '/pupil/profile' ) {
    if (user_has_role(TEACHER_ROLE)) {
      drupal_goto('tutor-setup');
    }
    if (user_is_anonymous()) {
      drupal_goto('/');
    }
  }

  if (request_uri() == '/tutor-setup' ) {
    if (user_has_role(STUDENT_ROLE)) {
      drupal_goto('pupil/profile');
    }
    if (user_is_anonymous()) {
      drupal_goto('/');
    }
  }

  // for teacher user/56/edit
  if (strstr(request_uri(), 'user') && strstr(request_uri(), 'edit') ) {
    if (user_has_role(TEACHER_ROLE)) {
      if (!$_GET["pass-reset-token"]) {
        drupal_goto('tutor-setup');
      }
    }
  }

  if (strstr(request_uri(), 'user') && strstr(request_uri(), 'edit') ) {
    if (user_has_role(STUDENT_ROLE)) {
      if (!$_GET["pass-reset-token"]) {
        drupal_goto('pupil/profile');
      }
    }
  }


}

/**
 * Implements hook_user_insert()
 */
function education_common_user_insert(&$edit, $account, $category) {
  if (isset($edit['field_is_a_teacher'][LANGUAGE_NONE]) && $edit['field_is_a_teacher'][LANGUAGE_NONE]['0']['value'] ) {
    $role = TEACHER_ROLE;
  }
  else {
    $role = STUDENT_ROLE;
  }

  user_multiple_role_edit(array($account->uid), 'add_role', $role);

  /*
  if ($role == TEACHER_ROLE) {

    $newly_registered_user_id = $account->uid;

    // credit: ML and https://www.drupal.org/project/login_activity/issues/2066899 (second snippet of code)
    global $user;
    $user = user_load($newly_registered_user_id);
    drupal_session_regenerate();

    drupal_goto('tutor-setup');
  }
  */
}


function education_common_preprocess_mimemail_message(&$variables) {
  $variables['body'] = html_entity_decode($variables['body']);
}


function education_common_preprocess_calendar_month_row($variables) {

  if ($variables['class'] == 'single-day') {
    $a = 1;
  }
}


function education_common_preprocess_calendar_month_col(&$variables) {
  global $user;
  $teacher_uid = $user->uid;
  $lesson_uid = arg(1);
  //echo arg(1); die();
  if (request_uri() == '/teacher-schedule') {
    $lesson_uid =  $teacher_uid;
  }

  if (strstr($variables['item']['class'], 'empty')) {
  //if ($variables['class'] == 'single-day') {
    $a = 1;
  }

  if ($lesson_uid == $teacher_uid) {
    if (strstr($variables['item']['class'], 'no-entry')) {
      //if ($variables['class'] == 'single-day') {
      $current_date = time();
      $date = $variables['item']['date'];
      $col_date = strtotime($date);

      $output = '';
      if ($col_date >= $current_date) {
        $output = '<a href="#" class="btn lesson_date_enable popup__link"
        data-popup="lesson_date_enable" data-date="' . $date . '" data-teacher-uid="' . $teacher_uid . '">
Enable this position</a>';
      }
      $variables['item']['entry'] = $output;
    }
    else {
      $current_date = time();
      $date = $variables['item']['date'];
      $col_date = strtotime($date);

      $time_to_compare = time() - 3600 * 12;
      //$variables['item']['entry'] = $col_date . '>' . $time_to_compare;

      if ($col_date >= $current_date - 3600 * 22) {
        $o = 1;

        if ( strstr($variables['item']['entry'], 'lesson_date_disable')) {
          $variables['item']['entry'] .= '<br><a href="#" class="btn lesson_date_enable popup__link add_more"
        data-popup="lesson_date_enable" data-date="' . $date . '" data-teacher-uid="' . $teacher_uid . '">
Add more schedule position</a>';
        }
        //
      }
    }
  }

  //$variables['item']['class'] = 'date-box past empty testttttttt';
}

/**
 * Implements hook_theme()
 */
function education_common_theme() {
  return array(
    'education_common_mail_body' => array(
      'variables' => array(
        'order_items' => NULL,
        'order_num' => NULL,
        'order_uid' => NULL,
        'order_total' => NULL,
        //'order_delivery'=> NULL,
        //'order_payment'=> NULL,
        //'order_comment'=> NULL,
      ),
      'path' => drupal_get_path('module', 'education_common') . '/templates',
      'template' => 'education-common-mail-body',
    ),

    'user_register_form' => array(
      'render element'=>'form',
      'path' => drupal_get_path('module', 'education_common') . '/templates',
      'template' => 'user-register',
    ),

    'user_profile_form' => array(
      'render element'=>'form',
      'path' => drupal_get_path('module', 'education_common') . '/templates',
      'template' => 'user-profile',
    ),

    'lesson_pay_formm' => array(
      'render element'=>'form',
      'path' => drupal_get_path('module', 'education_common') . '/templates',
      'template' => 'lesson-pay-form',
    ),

   'education_common_anonymous_menu' => array(
     'variables' => array(
       'menu_items' => NULL,
     ),
     'path' => drupal_get_path('module', 'education_common') . '/templates',
     'template' => 'education-common-anonymous-menu',
   ),


  );


}


/**
 * Implementation of hook_rules_event_info()
 */
function education_common_rules_event_info() {
  return array(
    'education_common_send_message_to_user' => array(
      'label' => t('Send message to user'),
      'module' => 'education_common',
      'group' => 'Booking a lesson' ,
      'variables' => array(
        'email' => array('type' => 'text', 'label' => t('User email form quick order form')),
        'name' => array('type' => 'text', 'label' => t('User name')),
        'phone' => array('type' => 'text', 'label' => t('User phone')),
        'skype' => array('type' => 'text', 'label' => t('Skype login')),
        'order_id' => array('type' => 'text', 'label' => t('Order Id')),
        'order_mail_data' => array('type' => 'text', 'label' => t('Order mail data')),
        'teacher_email' => array('type' => 'text', 'label' => t('Teacher email form quick order form')),
        //'order_mail_data_admin' => array('type' => 'text', 'label' => t('Order mail data admin')),
        //'order_type_title' => array('type' => 'text', 'label' => t('Order typ title')),
      ),
    ),

    'education_common_send_new_user_account_data' => array(
      'label' => t('Send new user account data'),
      'module' => 'education_common',
      'group' => 'Booking a lesson' ,
      'variables' => array(
        'email' => array('type' => 'text', 'label' => t('User email form quick order form')),
        'name' => array('type' => 'text', 'label' => t('User name')),
        'phone' => array('type' => 'text', 'label' => t('User phone')),
        'one_time_login' => array('type' => 'text', 'label' => t('User one time login url')),
      ),
    ),

  );
}

function education_common_preprocess_views_view(&$vars) {
  $name = $vars['view']->name;
  if ($name == 'lesson_calendar') {
    foreach ($vars['view']->result as $res_item) {
      //$res_item->field_data_field_lesson_date_field_lesson_date_value
    }
  }
}

/**
 * Implements hook_form_alter
 */
function education_common_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-lesson-calendar-page-1') {
    $role = user_role_load_by_name('Teacher');
    $uids = db_select('users_roles', 'ur')
      ->fields('ur', array('uid'))
      ->condition('ur.rid', $role->rid, '=')
      ->execute()
      ->fetchCol();
    $users = user_load_multiple($uids);
    if (!empty($users)) {
      $options = array(
        '' => '- Any -',
      );
      foreach ($users as $user) {
        $options[$user->name] = $user->name;
      }

      $form['uid'] = array(
        '#type' => 'select',
        //'#title' => 'Select teacher',
        '#title' => '',
        '#options' => $options,
        '#default_value' => '',
      );
    }
  }


  if ($form['#id'] == 'views-exposed-form-teachers-index-page') {
    ///////////////////////////////////////////////////
    $form['submit']['#weight'] = 30;
    $form['submit']['#buttontype'] = 'button';
    $form['#after_build'][] = 'education_common_force_triggering_element';

    $form['field_grade_subject']['#options']['All'] = 'Select subject';

    $form['field_grade_subject']['#title'] = '';
    $form['field_grade_subject']['#theme_wrapper'] = '';

    $form['teacher_lessons_dates']['#access'] = FALSE;


      $form['teacher_date_dates'] = array(
        '#type' => 'date_popup',
        '#size' => 30,
        //'#default_value' => !drupal_is_front_page() ? date('Y-m-d', time()) : '',
        '#date_format' => 'Y-m-d',
        '#date_year_range' => '-3:+3',
        '#description' => '',
        '#attributes' => array('placeholder' => 'Nearest date')
      );
    if (!drupal_is_front_page()) {
      $form['time_slider'] = array(
        '#title' => 'Select time range',
        '#input_title' => NULL,
        '#input2_title' => NULL,
        '#type' => 'slider',
        '#default_value' => array('value' => 0.00, 'value2' => 23.00),
        //'#orientation' => 'vertical',
        // '#slider_style' => 'orange',
        '#range' => TRUE,
        '#min' => 0.00,
        '#max' => 23.00,
        '#step' => 1.00,
        // '#display_bubble' => TRUE,
        //'#display_bubble_format' => '$%{value}%MIN||$%{value}%MAX',
        //'#required' => 1,
        //'#disabled' => TRUE,
        '#display_inputs' => FALSE,
        '#display_values' => TRUE,
        '#display_values_format' => '%{value}%.00',
        '#weight' => 29,
      );
    }
    ///////////////////////////////////////////////////
  }

}

function education_common_force_triggering_element($form, &$form_state) {
  if (isset($form_state['input']['submit'])) {
    $form_state['triggering_element'] = $form['submit'];
  } elseif (isset($form_state['input']['other_button'])) {
    $form_state['triggering_element'] = $form['other_button'];
  }
  return $form;
}

/**
 * hook_search_api_query_alter
 */
function education_common_search_api_query_alter(SearchApiQueryInterface $query) {
  if ($query->getOption('search id') == 'search_api_views:teachers_index:page') {
    if (isset($_GET['time_slider'])) {
      $time_slider_arr = $_GET['time_slider'];
      $time_slider_from = $_GET['time_slider']['value'];
      $time_slider_to = $_GET['time_slider']['value2'];

      if ($time_slider_from != 0 && $time_slider_to != 23 ) {

        $teacher_lesson_date = !empty($_GET['teacher_date_dates']['date'])
          ? strtotime($_GET['teacher_date_dates']['date']) : time();
        //$t_d = date('Y-m-d H:i', $teacher_lesson_date);

        $right_filter = $query->createFilter('AND');

        $time_min = $teacher_lesson_date + $time_slider_from * 3600;
        $time_max = $teacher_lesson_date + $time_slider_to * 3600;

        //$t_d_min = date('Y-m-d H:i', $time_min);
        //$t_d_max = date('Y-m-d H:i', $time_max);

        $right_filter->condition('teacher_lessons_dates', $time_min, '>=');
        $right_filter->condition('teacher_lessons_dates', $time_max, '<=');

        $main_filter = $query->createFilter('AND');
        $main_filter->filter($right_filter);
        $query->filter($main_filter);
      }
      else {
        if (!empty($_GET['teacher_date_dates']['date'])) {
          $right_filter = $query->createFilter('AND');
          $teacher_lesson_date = strtotime($_GET['teacher_date_dates']['date']);
          $time_min = $teacher_lesson_date;
          $time_max = $teacher_lesson_date + 23 * 3600;

          //echo 'ttt'; die();
          //var_dump($query); die();

          $d = 1;

          //echo date('Y-m-d H:i', $time_min) . ' ' . date('Y-m-d H:i', $time_max); die();

          //$t_d_min = date('Y-m-d H:i', $time_min);
          //$t_d_max = date('Y-m-d H:i', $time_max);

          $right_filter->condition('teacher_lessons_dates', $time_min, '>=');
          $right_filter->condition('teacher_lessons_dates', $time_max, '<=');

          $main_filter = $query->createFilter('AND');
          $main_filter->filter($right_filter);
          $query->filter($main_filter);
        }
      }


    }
  }
}



function education_common_preprocess_user_profile(&$variables) {
  //unset($variables['elements']['user_picture']);
  //unset($variables['user_profile']);
}

/**
 * Helper to rendered block().
 */
function education_common_get_rendered_block($module_name, $block_name) {
  $block_render_data = block_load($module_name, $block_name);
  $block_render_data = _block_render_blocks(array($block_render_data));
  $block_build = _block_get_renderable_array($block_render_data);
  $rendered_block = drupal_render($block_build);
  return $rendered_block;
}

/**
 * Override or insert variables into the node template.
 */
function education_common_preprocess_node(&$variables) {
  // student or teacher redirects to classroom
  if ($variables['type'] == 'classroom' && (user_has_role(STUDENT_ROLE) ||
      user_has_role(TEACHER_ROLE) )) {
    drupal_goto('classroom/' . $variables['nid']);
  }
}

/**
 * Override or insert variables into the node template.
 */
function education_common_preprocess_page(&$variables) {

 // $l_node = node_load(31);
 // var_dump($l_node); die();

  /*
  $query = new EntityFieldQuery;
  $type = 'lesson';
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->propertyCondition('type', $type)
    ->fieldCondition('field_lesson_date', 'value',  '2020-04-08 15:30:00', '=')
    //->propertyCondition('uid', $uid)
    ->execute();
  if (!empty($result['node'])) {

    $users  = array();
    foreach($result['node'] as $n_obj) {
      $node = node_load($n_obj->nid);

      $users[] = user_load($node->uid);
  }
    */


  if (strstr(current_path(), 'user/') && !strstr(current_path(), 'admin/')
    || strstr(current_path(), 'lesson-calendar-week') || strstr(current_path(), 'pupil/schedule') || request_uri() == '/teacher-schedule' ) {
    global $user;
    $block_quick_order = education_common_get_rendered_block('education_common', 'form-quick-order');
    $block_lesson_date_close = education_common_get_rendered_block('education_common', 'form-close-lesson-date');
    $block_lesson_date_disable = education_common_get_rendered_block('education_common', 'form-disable-lesson-date');
    $block_lesson_date_enable = education_common_get_rendered_block('education_common', 'form-enable-lesson-date');
    $variables['quick_order_form'] = $block_quick_order;

    if (strstr(current_path(), 'user')) {
      $current_path_uid = arg(1);
    }
    else {
      if (request_uri() == '/teacher-schedule') {
        $current_path_uid =  $user->uid;
      }
    }
    if (isset($current_path_uid) && $current_path_uid == $user->uid) {
      $variables['lesson_date_close_form'] = $block_lesson_date_close;
      $variables['lesson_date_disable_form'] = $block_lesson_date_disable;
      $variables['lesson_date_enable_form'] = $block_lesson_date_enable;
      drupal_set_title('My Account');
    }


    drupal_add_js(drupal_get_path('module', 'education_common') . '/js/book.js');
  }

  //echo current_path();die();
  if (strstr(request_uri(), '/pupil/planned-lessons')) {
    $block_lesson_pay = education_common_get_rendered_block('education_common', 'form-lesson-pay');
    $variables['lesson_pay_form'] = $block_lesson_pay;
    drupal_add_js(drupal_get_path('module', 'education_common') . '/js/book.js');
  }

  if (strstr(request_uri(), '/recharge-balance')) {
    $block_balance_recharge = education_common_get_rendered_block('education_common', 'form-balance-recharge');
    $variables['form_balance_recharge'] = $block_balance_recharge;
    drupal_add_js(drupal_get_path('module', 'education_common') . '/js/book.js');
  }

  //pupil/planned-lessons

  //drupal_add_js(drupal_get_path('module', 'education_common') . '/js/tooltip.js');
  drupal_add_css(drupal_get_path('module', 'education_common') . '/css/tooltip.css');
  drupal_add_js(drupal_get_path('module', 'education_common') . '/js/all-teachers.js');

  if (request_uri() == '/pupil/profile') {
    drupal_add_library('system', 'ui.accordion');
    drupal_add_js('jQuery(document).ready(function(){jQuery("#pupils-accordion").accordion({collapsible: true});});', 'inline');
  }

  if (drupal_is_front_page()) {
    drupal_add_js(drupal_get_path('module', 'education_common') . '/js/front.js');
  }
  if (strstr(request_uri(), '/classroom')) {
    global $user;

    if (!user_is_anonymous()) {
      $user_account = user_load($user->uid);
      // todo ЭТИ данные получать из данных по vox пользователя юзера и тичера

      /*
      if (user_has_role(TEACHER_ROLE)) {
        drupal_add_js(array('vox_username' => 'ladovod'), 'setting');
        // todo
        drupal_add_js(array('vox_password' => 'ladovod'), 'setting');
      }
      if (user_has_role(STUDENT_ROLE)) {
        drupal_add_js(array('vox_username' => 'ladovod3'), 'setting');
        // todo
        drupal_add_js(array('vox_password' => 'ladovod3'), 'setting');
      }
      */
      if ($user_account->field_vox_username[LANGUAGE_NONE][0]) {
        drupal_add_js(array('vox_username' => $user_account->field_vox_username[LANGUAGE_NONE][0]['value']), 'setting');
        drupal_add_js(array('vox_password' => $user_account->field_vox_password[LANGUAGE_NONE][0]['value']), 'setting');
      } else {
        if (user_has_role(TEACHER_ROLE)) {
          drupal_add_js(array('vox_username' => 'ladovod'), 'setting');
          // todo
          drupal_add_js(array('vox_password' => 'ladovod'), 'setting');
        }
        if (user_has_role(STUDENT_ROLE)) {
          drupal_add_js(array('vox_username' => 'ladovod3'), 'setting');
          // todo
          drupal_add_js(array('vox_password' => 'ladovod3'), 'setting');
        }
      }

      /////////////////////

      drupal_add_js(drupal_get_path('theme', 'education') . '/js/jquery.countdown/js/jquery.plugin.js');
      drupal_add_js(drupal_get_path('theme', 'education') . '/js/jquery.countdown/js/jquery.countdown.js');
      drupal_add_js(drupal_get_path('theme', 'education') . '/js/classroom-timer.js');

      //drupal_add_js(drupal_get_path('theme', 'education') . '/js/classroom.js');

      //////////////////////////////////
      // For video block
      /*
      drupal_add_css(drupal_get_path('module', 'education_classroom') . '/css/bootstrap.min.css');
      drupal_add_css(drupal_get_path('module', 'education_classroom') . '/css/bootstrap-dialog.css');
      drupal_add_css(drupal_get_path('module', 'education_classroom') . '/css/app.css');

      drupal_add_js(drupal_get_path('module', 'education_classroom') . '/js/video/bootstrap.min.js');
      drupal_add_js(drupal_get_path('module', 'education_classroom') . '/js/video/bootstrap-dialog.js');
      drupal_add_js(drupal_get_path('module', 'education_classroom') . '/js/video/voximplant.min.js');

      drupal_add_js(drupal_get_path('module', 'education_classroom') . '/js/video/app.js');
      */
      drupal_add_js(array('classroom_nid' => arg(1)), 'setting');

      drupal_add_js(array('classroom_uid' => $user->uid), 'setting');
      drupal_add_js(drupal_get_path('module', 'education_classroom') . '/js/video/classroom.js');
    }
  }

  $variables['show_anonymous_menu'] = FALSE;
  if (user_is_anonymous()) {
    $anonymous_menu = menu_tree('menu-anonymous-menu');
    $menu_items = array();
    foreach ($anonymous_menu as $key => $anonymous_menu_item) {
      if (is_numeric($key)) {
        $menu_items[] = array(
          'href' => $anonymous_menu_item['#href'] == '<front>' ? '/' : $anonymous_menu_item['#href'],
          'title' =>  $anonymous_menu_item['#title'],
        );
      }
    }

    $variables['show_anonymous_menu'] = TRUE;
    $variables['education_common_anonymous_menu'] = theme('education_common_anonymous_menu', array('menu_items' => $menu_items));

  }

}

/**
 * Implements hook_block_info
 */
function education_common_block_info() {
  $blocks['form-quick-order'] = array(
    'info' => 'Booking form',
  );
  $blocks['form-close-lesson-date'] = array(
    'info' => 'Close lesson date form',
  );

  $blocks['form-disable-lesson-date'] = array(
    'info' => 'Disable lesson date form',
  );

  $blocks['form-enable-lesson-date'] = array(
    'info' => 'Disable lesson date form',
  );

  $blocks['form-pupil-registation'] = array(
    'info' => 'Pupil registration form',
  );

  $blocks['form-pupil-profile'] = array(
    'info' => 'Pupil profile form',
  );

  $blocks['form-lesson-pay'] = array(
    'info' => 'Lesson pay form',
  );

  $blocks['form-balance-recharge'] = array( // balance_pay_form
    'info' => 'Recharge balance form',
  );

  $blocks['front-tutors-search'] = array(
    'info' => 'Front tutors search',
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function education_common_block_view($delta = '') {
  $block = array(
    'subject' => '',
    'content' => '',
  );

  switch ($delta) {
    case 'form-quick-order':
      $block['subject'] = t('Book a lesson');
      $block['content'] = drupal_get_form('education_common_quick_order');
      break;
    case 'form-close-lesson-date':
      $block['subject'] = t('Close lesson date');
      $block['content'] = drupal_get_form('education_common_close_lesson_date');
      break;

    case 'form-disable-lesson-date':
      $block['subject'] = t('Disable lesson date');
      $block['content'] = drupal_get_form('education_common_disable_lesson_date');
      break;

    case 'form-enable-lesson-date':
      $block['subject'] = t('Enable lesson date');
      $block['content'] = drupal_get_form('education_common_enable_lesson_date');
      break;

    case 'form-pupil-registation':
      $block['subject'] = t('Pupil registration');
      $block['content'] = drupal_get_form('user_register_form');
      break;
    case 'form-pupil-profile':
      module_load_include('inc', 'user', 'user.pages');
      global $user;
      $block['subject'] = t('Pupil profile');
      $block['content'] = drupal_get_form('user_profile_form', user_load($user->uid));
      break;

    case 'form-lesson-pay':
      global $user;
      $block['subject'] = t('Lesson pay');
      $block['content'] = drupal_get_form('lesson_pay_form');
      break;

    case 'form-balance-recharge':
      global $user;
      $block['subject'] = t('Balance recharge');
      $block['content'] = drupal_get_form('balance_pay_form');
      break;

    case 'front-tutors-search':
      //module_load_include('inc', 'user', 'user.pages');
      global $user;
      $block['subject'] = '';

      $block = module_invoke('views', 'block_view', '-exp-teachers_index-page');
      $block['content'] = $block['content'];
      break;
  }
  return $block;
}


/**
 * Создание пользователя во время создания "быстрого заказа"
 */
function education_common_create_quick_order_user($name, $pass, $mail, $phone, $skype) {

  //$roles =  array(DRUPAL_AUTHENTICATED_RID => TRUE);
  $roles =  array(DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    5 => 'Student',); //

  $new_user = user_save(NULL, array(
    //'name' => $mail,
    'name' => $name,
    //'pass' => $pass,
    'mail' => $mail,
    'init' => 'email address',
    'status' => 1,
    'roles' => $roles,  //

    'field_phone' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $phone,
        )
      )
    ),

    'field_skype' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $skype,
        )
      )
    ),

    /*
    'field_discount' => array(
      'und' => array(
        0 => array(
          'value' => 0,
        )
      )
    ),
    */

    /*
    'field_user_guid' => array(
      'und' => array(
        0 => array(
          'value' => $guid,
        )
      )
    ),
    */

    /*
    'field_user_fio' => array(
      'und' => array(
        0 => array(
          'value' => $name,
        )
      )
    ),
    */

    /*
    'field_terms_of_use' => array(
      'und' => array(
        0 => array(
          'value' => 1,
        )
      )
    ),
    */

  ));

  $one_time_login_url = user_pass_reset_url($new_user);
  rules_invoke_event('education_common_send_new_user_account_data', $mail, $name,
    $phone, $one_time_login_url);

  return $new_user;
}

/**
 * Создание "быстрого заказа"
 */
function education_common_create_quick_order($user, $product_id, $quantity=1, $date, $teacher_uid,  $user_phone, $name, $email, $skype, $is_cart, $is_paid) {

  global $user;

  $order_status = $is_paid ? 'paid' : 'pending';

  //$user_phone = hb_user_clear_phone($user_phone);
  // for anonymous
  if (!$user->uid) {
    // TODO check by email
    $user_account = user_load_by_mail($email);
    if ($user_account) {
      $new_user = $user_account;
    }
    else {
      $new_user = education_common_create_quick_order_user($name, 0, $email, $user_phone, $skype);
    }
  }
  else {
    $new_user = $user;
  }


  //$new_user = TRUE;
  // Create order
  if ($new_user) {
    $order = commerce_order_new($new_user->uid, $order_status);
  }
  else {
    $order = commerce_order_new($user->uid, $order_status);
  }
  commerce_order_save($order);

  // Create order line item
  $product = commerce_product_load($product_id);
  $line_item = commerce_product_line_item_new($product, $quantity, $order->order_id);
  commerce_line_item_save($line_item);

  // Attach line item to order
  $order->commerce_line_items[LANGUAGE_NONE][] = (array)$line_item;
  // TODO - для order NEED to ADD fields lesson_date и teacher
  $order->field_order_lesson_date[LANGUAGE_NONE][0]['value'] = $date;
  $order->field_lesson_teacher_uid[LANGUAGE_NONE][0]['uid'] = $teacher_uid;
  $order->field_skype[LANGUAGE_NONE][0]['value'] = $skype;

  /*
  $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

  $profile_wrapper->commerce_customer_address->name_line = $name;
  $profile_wrapper->commerce_customer_address->phone_number = $user_phone;

  // $profile_wrapper->field_phone = $user_phone;
//  $profile_wrapper->field_email = $email;
  $profile_wrapper->save();

  $order->commerce_customer_shipping[LANGUAGE_NONE][0]['profile_id'] = $profile->profile_id;
  */
  commerce_order_save($order);

  if ($user_phone) {
    // sms о заказе
    // $msg = 'Booking  № ' . $order->order_id . ' is created';
    //  education_common_send_sms($order, $msg, $user_phone);
  }

  return $order->order_id;
}

